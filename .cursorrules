# ABCD サポート担当コパイロット PoC - Cursor AI Rules

## プロジェクト概要
このプロジェクトは、ABCD (Action-Based Conversations Dataset) を活用したサポート担当コパイロットの技術検証（PoC）です。
対話履歴から「次に取るべきアクション」を推論するタスク指向Botの中核ロジックを、Snowflake（DWH）＋ SageMaker（ML/LLM）上で実装・評価します。

## 必須参照ドキュメント
**重要**: コーディングを行う前に、必ず以下のドキュメントを @docs フォルダから参照してください：

### 1. 要件定義 (@docs/requirements_definition.md)
- プロジェクトの目的と機能要件
- データ基盤（Snowflake）での処理要件
- ML/LLM検証（SageMaker）での要件
- 成果物の定義とスコープ外事項

### 2. 技術仕様 (@docs/technical_specification.md)
- システムアーキテクチャ（3層構成）
- 技術スタック（Snowflake, SageMaker, Python）
- データフィールド構造とAPI仕様
- モデル実装の詳細

### 3. データ仕様 (@docs/data_specification.md)
- ABCDデータセットの構造と特徴
- ファイル構成（train.json, dev.json, test.json）
- データフィールドの詳細定義
- Snowflakeテーブル設計

### 4. 開発環境設定 (@docs/development_setup.md)
- 開発環境の構築手順
- 依存関係とツール設定
- 認証情報の管理方法

### 5. プロジェクト計画 (@docs/project_plan.md)
- 開発フェーズとマイルストーン
- 作業スケジュールと成果物

## コーディング指針

### データ処理
- ABCDデータセットは10,042対話、83,731ターンの英語カスタマーサポートデータ
- 55種類のアクションラベルを使用したAction State Tracking
- データはSnowflakeで管理し、学習/検証/テスト用に分割

### 機械学習
- SageMakerを使用したアクション推論モデルの実装
- プロンプト設計によるベースライン確立
- 必要に応じてLoRAファインチューニング
- 入力：対話履歴（直近Nターン）、出力：推論アクション（JSON形式）

### 技術スタック遵守
- **データ基盤**: Snowflake（DDL, ETL, クエリ）
- **ML/LLM**: Amazon SageMaker（ノートブック、スクリプト）
- **データ処理**: pandas, numpy
- **深層学習**: PyTorch, Transformers
- **評価**: scikit-learn, matplotlib

### プロジェクト構造
```
abcd-copilot-poc/
├── docs/                    # 技術仕様書（必須参照）
├── config/                  # 設定ファイル
├── snowflake/              # Snowflake関連（DDL, ETL, クエリ）
├── sagemaker/              # SageMaker関連（ノートブック、スクリプト、モデル）
├── src/                    # ソースコード（データ処理、モデル、ユーティリティ）
├── data/                   # データ（生データ、前処理済み、評価結果）
└── tests/                  # テストコード
```

## コーディング時の注意事項

1. **ドキュメント優先**: 新しい機能を実装する前に、該当するドキュメントセクションを確認
2. **データ仕様遵守**: ABCDデータセットの構造とフィールド定義に従う
3. **技術スタック遵守**: 指定された技術要素のみを使用
4. **段階的実装**: プロンプトベースライン → ファインチューニング の順序で実装
5. **評価重視**: Action State Tracking精度の定量評価を含める
6. **PoC前提**: 本番運用は考慮せず、技術検証に集中

## 実装優先順位
1. Snowflakeデータ基盤構築（スキーマ設計、ETL）
2. SageMakerプロンプトベースライン実装
3. 評価パイプライン構築
4. モデル改善（ファインチューニング等）

このルールに従って、必ずドキュメントを参照しながらコーディングを進めてください。

## ドキュメント作成指針

### 簡潔性の原則
- **冗長な説明を避ける**: 見れば分かることは書かない
- **実用性重視**: 実際の作業に必要な情報のみ記載
- **重複排除**: 同じ情報を複数箇所に書かない
- **テンプレート活用**: 一貫した構造で無駄を削減

### 必須項目のみ記載
- **要件定義**: 目的・スコープ・成功基準のみ
- **技術仕様**: アーキテクチャ・技術スタック・API仕様のみ
- **計画書**: WBS・期間・工数のみ
- **設計書**: 構造図・データフロー・インターフェースのみ

### 除外すべき項目
- 自明な説明（「進捗管理方法」など）
- 当然の内容（「品質管理」「リスク対策」など）
- 重複情報（スケジュールがWBSと重複など）
- 過度な詳細（実装時に決めれば良い項目） 